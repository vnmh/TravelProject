import React, { useState, useEffect } from "react";
import { Link, withRouter } from "react-router-dom";
import { compose, lifecycle } from "recompose";
import { connect } from "react-redux";
import _ from "lodash";
import { authActions } from "~/state/ducks/authUser";
import * as PATH from "~/configs/routesConfig";

import styled from "styled-components"; // D√πng ƒë·ªÉ ghi ƒë√® style b√™n trong component ho·∫∑c ƒë·ªÉ code style nh∆∞ m·ªôt css th√¥ng th∆∞·ªùng
import { appApisActions } from "~/state/ducks/appApis";
import { Form, Input, Button, Checkbox, Row, Select, DatePicker, InputNumber, Cascader } from "antd";
import { PROVINCES } from "~/configs/VNprovinces";
import moment from "moment";
import { mapAddressNotWardToOptionAntd } from "~/configs/addressVN";
import { SERVICES } from "~/configs/servicesConfig";
import { TYPE_TOUR } from "~/configs/const";
const { Option } = Select;
const CRUDTourAdminStyled = styled.div``;

const { TextArea } = Input;

const layout = {
   labelCol: { span: 8 },
   wrapperCol: { span: 8 }
};
const tailLayout = {
   wrapperCol: { offset: 20, span: 16 }
};

const CRUDTourAdmin = (props) => {
   const onFinish = (values) => {
      console.log("üöÄ ~ file: CRUDTourAdmin.js ~ line 29 ~ onFinish ~ values", values?.services.join(","));
      //N·∫øu currentEdit th√¨ g·ªçi API update, kh√¥ng th√¨ g·ªçi API create
      // if (props.currentEdit) {
      //    //G·ªçi API update tour
      //    const bodyUpdate = { ...values, idTour: props.currentEdit?.idTour };
      //    console.log("hiendev ~ file: EditTourAdmin.js ~ line 27 ~ onFinish ~ bodyUpdate", bodyUpdate);
      //    props
      //       .patchTour(bodyUpdate)
      //       .then((res) => {
      //          //Success: th√¨ ƒë√≥ng form edit l·∫°i v√† th√¥ng b√°o cho ng∆∞·ªùi d√πng
      //          props.setCurrentEdit(undefined);
      //       })
      //       .catch((err) => {
      //          console.log("hiendev ~ file: EditTourAdmin.js ~ line 30 ~ onFinish ~ err", err);
      //       });
      //    //Fail: kh√¥ng l√†m g√¨
      // } else {
      //    //G·ªçi API post tour
      //    const bodyCreate = {
      //       titleTour: "",
      //       price: 1000,
      //       sale: "",
      //       departureDay: "",
      //       describe: "",
      //       address: "",
      //       vocationTime: "",
      //       idAccount: "",
      //       tags: "",
      //       services: "",
      //       views: "",
      //       votes: "",
      //       reuse: "",
      //       type: "",
      //       ...values
      //    };
      //    console.log("hiendev ~ file: CRUDTourAdmin.js ~ line 42 ~ onFinish ~ bodyCreate", bodyCreate);
      //    props
      //       .postTour(bodyCreate)
      //       .then((res) => {
      //          //Success: th√¨ ƒë√≥ng form create l·∫°i v√† th√¥ng b√°o cho ng∆∞·ªùi d√πng
      //          props.setIsCreateTour(false);
      //       })
      //       .catch((err) => {
      //          console.log("hiendev ~ file: EditTourAdmin.js ~ line 30 ~ onFinish ~ err", err);
      //       });
      //    //Fail: kh√¥ng l√†m g√¨
      // }
   };

   const onFinishFailed = (errorInfo) => {
      console.log("Failed:", errorInfo);
   };

   return (
      <CRUDTourAdminStyled>
         <Form
            {...layout}
            name='basic'
            initialValues={{
               ...props.currentEdit,
               departureDay: moment(props.currentEdit?.departureDay),
               address: props.currentEdit?.address ? props.currentEdit?.address.split(",") : undefined,
               services: props.currentEdit?.services ? props.currentEdit?.services.split(",") : undefined
            }}
            onFinish={onFinish}
            onFinishFailed={onFinishFailed}>
            <Form.Item
               label='T√™n tour'
               name='titleTour'
               rules={[
                  {
                     required: true,
                     message: "H√£y nh·∫≠p t√™n tour!"
                  }
               ]}>
               <Input />
            </Form.Item>

            <Form.Item label='Gi√°' name='price' rules={[{ required: true, message: "H√£y nh·∫≠p t√™n gi√° tour!" }]}>
               <InputNumber
                  style={{ width: "100%" }}
                  min={0}
                  step={1000}
                  formatter={(value) => `${value}ƒë`}
                  parser={(value) => value.replace("ƒë", "")}
               />
            </Form.Item>
            <Form.Item
               label='Ng√†y kh·ªüi h√†nh'
               name='departureDay'
               rules={[{ required: true, message: "H√£y nh·∫≠p t√™n ng√†y kh·ªüi h√†nh!" }]}>
               <DatePicker
                  format='DD/MM/YYYY'
                  // value c·ªßa th·∫±ng n√†y l√† m·ªôt d·∫°ng moment (from momentjs)
               />
            </Form.Item>
            <Form.Item
               label='ƒê·ªãa ƒëi·ªÉm kh·ªüi h√†nh'
               name='departureAddress'
               rules={[{ required: true, message: "H√£y nh·∫≠p t√™n ƒë·ªãa ƒëi·ªÉm!" }]}>
               <Select
                  showSearch
                  style={{ width: "100%" }}
                  placeholder='Ch·ªçn ƒë·ªãa ch·ªâ'
                  optionFilterProp='children'
                  filterOption={(input, option) => option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}>
                  {PROVINCES.map((province) => {
                     return <Option value={province}>{province}</Option>;
                  })}
               </Select>
            </Form.Item>

            <Form.Item label='M√¥ t·∫£' name='describe' rules={[{ required: true, message: "H√£y nh·∫≠p m√¥ t·∫£!" }]}>
               <TextArea rows={4} />
            </Form.Item>
            <Form.Item label='ƒê·ªãa ƒëi·ªÉm' name='address' rules={[{ required: true, message: "H√£y nh·∫≠p t√™n ƒë·ªãa ƒëi·ªÉm!" }]}>
               <Cascader
                  //
                  // defaultValue={["zhejiang", "hangzhou"]}
                  options={mapAddressNotWardToOptionAntd()}
               />
            </Form.Item>
            <Form.Item
               name='type'
               label='Lo·∫°i tour'
               hasFeedback
               rules={[
                  {
                     required: true,
                     message: "H√£y ch·ªçn lo·∫°i tour!"
                  }
               ]}>
               <Select style={{ width: "100%" }}>
                  {Object.keys(TYPE_TOUR).map((o) => {
                     return <Option value={o}>{TYPE_TOUR[o]}</Option>;
                  })}
               </Select>
            </Form.Item>
            <Form.Item label='D·ªãch v·ª•' name='services' rules={[{ required: true, message: "H√£y ch·ªçn lo·∫°i d·ªãch v·ª•!" }]}>
               <Select
                  showSearch
                  mode='multiple'
                  style={{ width: "100%" }}
                  placeholder='Ch·ªçn dich v·ª•'
                  optionFilterProp='children'
                  filterOption={(input, option) => option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}>
                  {SERVICES.map((service) => {
                     return <Option value={service}>{service}</Option>;
                  })}
               </Select>
            </Form.Item>

            <Form.Item {...tailLayout}>
               <Button type='primary' htmlType='submit'>
                  Submit
               </Button>
               <Button
                  type='danger'
                  onClick={() => {
                     props.setCurrentEdit(undefined);
                     props.setIsCreateTour && props.setIsCreateTour(undefined);
                  }}>
                  ƒê√≥ng
               </Button>
            </Form.Item>
         </Form>
      </CRUDTourAdminStyled>
   );
};

export default compose(
   connect(
      (state) => ({
         user: state["authUser"].user,
         isAuthenticated: state["authUser"].isAuthenticated
         // c√≥ th·ªÉ check user?.role === ROLE.administrator && isAuthenticated => CRUDTourAdmin admin , kh√¥ng th√¨ redirect t·ªõi homepage
      }),
      {
         // postLogin: appApisActions.postLogin
         getTours: appApisActions.getTours,
         getAllImagesTour: appApisActions.getAllImagesTour,
         postTour: appApisActions.postTour,
         patchTour: appApisActions.patchTour
      }
   ),
   withRouter //ƒë·ªÉ push(nh·∫£y qua trang kh√°c) l√† ch·ªß y·∫øu,
)(CRUDTourAdmin);
